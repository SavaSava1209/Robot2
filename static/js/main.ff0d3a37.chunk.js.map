{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchField.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/Header.js","constants.js","App.js","actions.js","reportWebVitals.js","reducer.js","index.js"],"names":["Card","name","id","email","className","alt","src","CardList","robots","console","log","cardArray","i","length","push","SearchField","onSearchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","Header","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","isPending","requestRobots","dispatch","event","text","target","value","playload","onRequestRobots","fetch","then","res","json","users","catch","err","useEffect","filterRobots","filter","robot","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","initialRobotsState","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff0d3a37.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, id, email}) => {\r\n    return (\r\n        <div className='tc dib dim purple ma2 pa3 bg-light-pink br3 grow'>\r\n            <img alt='' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <h2>{name}</h2>        \r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    console.log('CardList')\r\n    let cardArray = []\r\n    for (let i=0; i < robots.length; i++) {\r\n        cardArray.push(<Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)\r\n    }\r\n    return (\r\n        <div className=''>\r\n            {cardArray}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\nconst SearchField = ({onSearchChange}) => {\r\n    console.log('searchBox')\r\n    return (\r\n        <div className=''>\r\n           <input \r\n           onChange={onSearchChange}\r\n           className='pa2 ma3 bg-light-green' type='search' placeholder='search robots' />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchField;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY:\"scroll\",  border: 'solid black', height: \"600px\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","\r\nimport React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something wrong</h1>\r\n        } \r\n        return this.props.children\r\n        \r\n    }\r\n    \r\n};\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Header = ({robots}) => {\r\n    console.log('Header')\r\n    return (\r\n        <h1>RobotFriends </h1>\r\n    )\r\n};\r\n\r\nexport default Header;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import './App.css';\nimport CardList from './Components/CardList';\nimport React, {  useEffect} from 'react';\nimport 'tachyons';\nimport SearchField from './Components/SearchField';\nimport Scroll from './Components/Scroll';\nimport ErrorBoundry from './Components/ErrorBoundry';\nimport { connect } from 'react-redux';\nimport Header from './Components/Header';\n\nimport { setSearchField, requestRobots } from './actions';\n\nconst mapStatetoProps = state => {\n    return {\n      searchField: state.searchRobots.searchField,\n      isPending: state.requestRobots.isPending,\n      robots: state.requestRobots.robots,\n      error: state.requestRobots.error\n\n    }\n  }\n\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      onSearchChange: (event) => dispatch(setSearchField(event.target.value)), \n      onRequestRobots: () => dispatch(requestRobots())\n    }\n  }\n\n\nfunction App(props) {  \n  \n\n  useEffect(() => props.onRequestRobots(), [])\n\n  \n\n  const filterRobots = props.robots.filter(robot => {\n     return robot.name.toLowerCase().includes(props.searchField.toLowerCase())\n    })\n  \n  return (\n    props.isPending\n    ? <h1 className='ma3'>Loading</h1>\n    : (<div className=\"App\">\n         <Header />\n         <SearchField onSearchChange={props.onSearchChange}/>\n         <Scroll>\n           <ErrorBoundry>\n             <CardList robots={filterRobots}/>   \n           </ErrorBoundry>\n         </Scroll>                    \n        </div>\n        )\n   \n  )\n\n\n    //  if (robots.length === 0) {\n    //   return (<h1 className='ma3'>Loading</h1>)\n    // } \n    //   return (\n    //     <div className=\"App\">\n    //       <h1>RobotFriends</h1>\n    //       <SearchField onSearchChange={onSearchChange}/>\n    //       <Scroll>\n    //         <ErrorBoundry>\n    //           <CardList robots={filterRobot}/>   \n    //         </ErrorBoundry>\n    //       </Scroll>           \n    //     </div>\n    //   );\n    \n  \n    \n   \n}\n\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     this.state = {\n//       robots: [],\n//       searchField: ' '\n//     }\n//   }\n\n//   componentDidMount() {\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//       .then(res => res.json())\n//       .then(users => this.setState({robots: users}))\n//       .catch(err => console.log('Unable to get users data'))\n//   }\n\n//   onSearchChange = (event) => {\n//     this.setState({searchField: event.target.value})\n//   }\n\n\n//   render() {\n//     const filterRobot = this.state.robots.filter(robot => {\n//      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n//     })\n//     if (this.state.robots.length === 0) {\n//       return (<h1 className='ma3'>Loading</h1>)\n//     } else {\n//       return (\n//         <div className=\"App\">\n//           <h1>RobotFriends</h1>\n//           <SearchField onSearchChange={this.onSearchChange}/>\n//           <Scroll>\n//             <ErrorBoundry>\n//               <CardList robots={filterRobot}/>   \n//             </ErrorBoundry>\n//           </Scroll>           \n//         </div>\n//       );\n//     }\n    \n//   }\n// }\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        playload: text\r\n    }\r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n   dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n   fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, isPending: false, playload: users}))\r\n        .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, isPending: false, playload: err}))\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = ( state=initialState, action={} ) =>  {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.playload })\r\n        default: \r\n            return state\r\n    }\r\n};\r\n\r\nconst initialRobotsState = {\r\n    isPending: true,\r\n    error: '',\r\n    robots: []\r\n}\r\n\r\nexport const requestRobots = (state=initialRobotsState, action={}) => {    \r\n        switch (action.type) {\r\n            case REQUEST_ROBOTS_PENDING:\r\n                return { ...state, isPending: true }\r\n            case REQUEST_ROBOTS_SUCCESS:\r\n                return { ...state, isPending: false, robots: action.playload }\r\n            case REQUEST_ROBOTS_FAILED:\r\n                return { ...state, isPending: false, error: action.playload }\r\n            default: \r\n                return state\r\n        \r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { searchRobots, requestRobots } from './reducer';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}